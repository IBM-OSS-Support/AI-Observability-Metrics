name: SonarQube Scan

on:
  push:
    branches:
      - ci_automation
  pull_request:
    branches:
      - ci_automation

jobs:
  sonarqube:
    runs-on: self-hosted
    steps:
      - name: Runner validation
        run: echo "Runner is working!"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SonarScanner in PATH
        run: echo "/opt/sonar-scanner-6.2.1.4610-linux-x64/bin" >> $GITHUB_PATH

      - name: Run SonarQube scanner
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=Ai-observability-metrics \
            -Dsonar.sources=. \
            -Dsonar.host.url="${SONAR_HOST_URL}" \
            -Dsonar.login="${SONAR_TOKEN}"

      - name: Get SonarQube metrics
        id: get_metrics
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_USER_TOKEN: ${{ secrets.SONAR_USER_TOKEN }}
        run: |
          metrics="bugs,vulnerabilities,security_hotspots,code_smells"
          response=$(curl -s -u "${SONAR_USER_TOKEN}:" "${SONAR_HOST_URL}/api/measures/component?component=Ai-observability-metrics&metricKeys=${metrics}")

          bugs=$(echo "$response" | jq -r '.component.measures[] | select(.metric=="bugs") | .value')
          vulnerabilities=$(echo "$response" | jq -r '.component.measures[] | select(.metric=="vulnerabilities") | .value')
          security_hotspots=$(echo "$response" | jq -r '.component.measures[] | select(.metric=="security_hotspots") | .value')
          code_smells=$(echo "$response" | jq -r '.component.measures[] | select(.metric=="code_smells") | .value')

          echo "bugs=$bugs" >> $GITHUB_ENV
          echo "vulnerabilities=$vulnerabilities" >> $GITHUB_ENV
          echo "security_hotspots=$security_hotspots" >> $GITHUB_ENV
          echo "code_smells=$code_smells" >> $GITHUB_ENV

          echo -e "bugs=$bugs\nvulnerabilities=$vulnerabilities\nsecurity_hotspots=$security_hotspots\ncode_smells=$code_smells" > current_metrics.txt

      - name: Upload current metrics as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-report
          path: current_metrics.txt

      - name: Download base branch metrics
        if: github.event_name == 'pull_request'
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: SonarQube Scan
          branch: ci_automation
          name: sonarqube-report
          path: base-metrics

      - name: Compare metrics and post PR comment
        if: github.event_name == 'pull_request'
        run: |
          declare -A base
          declare -A curr

          while IFS='=' read -r key value; do base[$key]=$value; done < base-metrics/current_metrics.txt
          while IFS='=' read -r key value; do curr[$key]=$value; done < current_metrics.txt

          echo "### SonarQube Report - Ai-observability-metrics" > comment.md
          echo "" >> comment.md
          echo "| Metric             | Base | PR | Î” |" >> comment.md
          echo "|--------------------|------|----|----|" >> comment.md

          for key in bugs vulnerabilities security_hotspots code_smells; do
            b=${base[$key]:-0}
            c=${curr[$key]:-0}
            d=$((c - b))
            change="âž–"
            [[ $d -gt 0 ]] && change="ðŸ”º +$d"
            [[ $d -lt 0 ]] && change="ðŸ”» $d"
            [[ $d -eq 0 ]] && change="âž–"
            echo "| ${key^} | $b | $c | $change |" >> comment.md
          done

          echo "" >> comment.md
          echo "_Compared to base branch_" >> comment.md

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: comment.md


      - name: Cleanup workspace
        if: always()
        run: |
          echo "Cleaning workspace..."
          rm -rf * .[^.] .??*
