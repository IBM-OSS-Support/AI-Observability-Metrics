name: SonarQube Scan

on:
  push:
    branches:
      - ci_automation
  pull_request:
    branches:
      - ci_automation

jobs:
  sonarqube:
    runs-on: self-hosted
    steps:
      - name: Runner validation
        run: echo "Runner is working!"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SonarScanner in PATH
        run: echo "/opt/sonar-scanner-6.2.1.4610-linux-x64/bin" >> $GITHUB_PATH

      - name: Run SonarQube scanner
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=Ai-observability-metrics \
            -Dsonar.sources=. \
            -Dsonar.host.url="${SONAR_HOST_URL}" \
            -Dsonar.login="${SONAR_TOKEN}"

      - name: Get SonarQube metrics summary and save as Markdown report
        id: get_metrics
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_USER_TOKEN: ${{ secrets.SONAR_USER_TOKEN }}
        run: |
          echo "Fetching SonarQube metrics summary..."
          metrics="bugs,vulnerabilities,security_hotspots,code_smells"
          response=$(curl -s -u "${SONAR_USER_TOKEN}:" "${SONAR_HOST_URL}/api/measures/component?component=Ai-observability-metrics&metricKeys=${metrics}")

          bugs=$(echo "$response" | jq -r '.component.measures[] | select(.metric=="bugs") | .value')
          vulnerabilities=$(echo "$response" | jq -r '.component.measures[] | select(.metric=="vulnerabilities") | .value')
          security_hotspots=$(echo "$response" | jq -r '.component.measures[] | select(.metric=="security_hotspots") | .value')
          code_smells=$(echo "$response" | jq -r '.component.measures[] | select(.metric=="code_smells") | .value')

          cat <<EOF > sonarqube-report.md
          # SonarQube Report - Ai-observability-metrics
          | Metric             | Count           |
            |--------------------|-----------------|
            | Bugs               | $bugs           |
            | Vulnerabilities    | $vulnerabilities |
            | Security Hotspots  | $security_hotspots |
            | Code Smells        | $code_smells    |
            _Generated by GitHub Actions._
          EOF

          echo "::set-output name=bugs::$bugs"
          echo "::set-output name=vulnerabilities::$vulnerabilities"
          echo "::set-output name=security_hotspots::$security_hotspots"
          echo "::set-output name=code_smells::$code_smells"

      - name: Upload SonarQube Markdown report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-report
          path: sonarqube-report.md

      - name: Post SonarQube report as PR comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ### SonarQube Report - Ai-observability-metrics

            | Metric             | Count           |
            |--------------------|-----------------|
            | Bugs               | ${{ steps.get_metrics.outputs.bugs }}           |
            | Vulnerabilities    | ${{ steps.get_metrics.outputs.vulnerabilities }} |
            | Security Hotspots  | ${{ steps.get_metrics.outputs.security_hotspots }} |
            | Code Smells        | ${{ steps.get_metrics.outputs.code_smells }}    |

            _Generated by GitHub Actions._
            
      - name: Cleanup workspace
        if: always()
        run: |
          echo "Cleaning workspace..."
          rm -rf * .[^.] .??*
