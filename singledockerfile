# Use Node.js image as base
FROM node:18 as build

# Set working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json to the working directory
COPY client-app/package*.json ./

# Install dependencies
RUN npm install && npm install sass

# Install Babel plugin
RUN npm install --save-dev @babel/plugin-proposal-private-property-in-object

# Copy the entire application to the working directory
COPY . .

# Build the React app
RUN npm run build

# Use nginx image as base for serving the static files
FROM nginx:alpine

# Copy the built files from the previous stage to nginx directory
COPY --from=build /app/build /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Command to start nginx
CMD ["nginx", "-g", "daemon off;"]


FROM node:14

WORKDIR /app

COPY package*.json ./

RUN npm install && npm install dotenv && npm install ws --save && npm install pg --save

COPY . .

EXPOSE 8080

CMD ["node", "server.js"]

# Use an official Python runtime as a base image
FROM python:3.10-slim

# Set the working directory in the container
WORKDIR /app

# Copy the requirements file into the container
COPY /applicaltions/flask-server/requirements.txt .

# Install any necessary dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the current directory contents into the container at /app
COPY  /applicaltions /app/applicaltions/

# Expose the port that Flask will run on
EXPOSE 5000

# Define environment variable to tell Flask it is in production
ENV FLASK_ENV=production

# Define the command to start the Flask app
CMD ["flask", "run", "--host=0.0.0.0"]

